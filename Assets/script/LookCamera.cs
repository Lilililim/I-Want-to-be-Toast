//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/LookCamera.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LookCamera : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LookCamera()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LookCamera"",
    ""maps"": [
        {
            ""name"": ""Look"",
            ""id"": ""b99acce1-7e0e-46dc-b8e1-84ce48219e1e"",
            ""actions"": [
                {
                    ""name"": ""KeyLook"",
                    ""type"": ""Button"",
                    ""id"": ""05b2aadb-b200-4f7c-8cf3-cc5624f229f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b917eb49-c94d-4950-b263-314a39e37bda"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa45b66e-f1bd-4f7f-ae53-5d2feac998ac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Look
        m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
        m_Look_KeyLook = m_Look.FindAction("KeyLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Look
    private readonly InputActionMap m_Look;
    private ILookActions m_LookActionsCallbackInterface;
    private readonly InputAction m_Look_KeyLook;
    public struct LookActions
    {
        private @LookCamera m_Wrapper;
        public LookActions(@LookCamera wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyLook => m_Wrapper.m_Look_KeyLook;
        public InputActionMap Get() { return m_Wrapper.m_Look; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
        public void SetCallbacks(ILookActions instance)
        {
            if (m_Wrapper.m_LookActionsCallbackInterface != null)
            {
                @KeyLook.started -= m_Wrapper.m_LookActionsCallbackInterface.OnKeyLook;
                @KeyLook.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnKeyLook;
                @KeyLook.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnKeyLook;
            }
            m_Wrapper.m_LookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @KeyLook.started += instance.OnKeyLook;
                @KeyLook.performed += instance.OnKeyLook;
                @KeyLook.canceled += instance.OnKeyLook;
            }
        }
    }
    public LookActions @Look => new LookActions(this);
    public interface ILookActions
    {
        void OnKeyLook(InputAction.CallbackContext context);
    }
}
